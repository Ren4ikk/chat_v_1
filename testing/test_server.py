import socket

# задаем ip и порт хоста
HOST = ('0.0.0.0', 20_000)

# на серверной составляющей будет end_point (сокет), который будет состоять из ip-адреса (AF_INET)
# и порт, который будет представлять tcp-соединение (SOCK_STREAM)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# после перезапуска сервера сокет может выдать ошибку, что вышепрописанный порт уже где-то используется
# это связано с работой tcp (после того как мы запускаем заново наш сервер
# значение порта может быть зарезервировано с определенным тайм-аутом, это делается для гарантии доставки
# необходимых пакетов по tcp-соединению)
# в этом методе первый агрумент: уровень до которого будут распространены данные настройки конфигурации
# SOL_SOCKET - означает уровень сокетов, SO_REUSEADDR - переиспользование адреса, 1 - значит True
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

# связываем сокет с хостом (ip, порт)
s.bind(HOST)

# ставим серверный сокет на прослушку, чтобы он ожидал tcp подключение
s.listen()
print('Прослушка началась')

while True:

    # принимаем входящее подключение от какого-либо клиента
    # клиентский сокет сохраняется в conn
    # адрес клиента сохраняется в addr
    conn, addr = s.accept()
    print('Connected - ', addr)

    # байт-строка (двоичное представление)
    res = b'Hello, my friend'

    # отправка сообщения клиенту
    # метод send может быть использован не только по tcp, но и по udp
    # передача данных будет осуществляться по протоколу http
    conn.send(res)

    # завершение сеанса соединения
    # conn.close()
